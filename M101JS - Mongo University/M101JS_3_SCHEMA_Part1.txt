
****BASICS
============

- Fundamental Priciple : In Mongo, we design the data around application. By looking which data is most accessed, deleted etc. So we look at application data 	
  access patterns to decide the schema. This is different from Relation where we design schema agnostic of application.
- Mongo is not just about tabular data. You can have rich data
- In mongo, you can embed a doc inside another doc.
- No joins are allowed in Mongo, so we need to do join within the application. Reason, join will make scalability difficult.
- No constaints attached to field like in relational DB.
- Mongo do not support transaction but it supports atomic operations
- No declared schema. But in most cases, every collection have a fixed column structure.

&&&& MOST IMPORTANT SCHEMA DESIGN CONSIDERATION FOR MONGO IS TO "MATCH THE DATA ACCESS PATTER OF YOUR APPLICATION &&&&

****THIRD NORMAL FORM IN RELATIONAL DATABASE
==============================================
	Data in below post table, it is not normalized to third degree. Becase email is not about the primary key in this table and if we need to update the email address, we will end up updating in multiple rows which creates in consistency or We have redundant data that is creating in consistency.

	Post-Id		title		Body 	Author 		Author Email
	-------		-----		----	-------		-------------
	1			"Elvis"		"aaa"	Andres		andres@gmai.com
	2			"Job"		"bbb"	Dave		dave@gmai.com
	3			"Betta"		"ccc"	Andres		andres@gmai.com
	4			"Corn"		"ddd"	Ram			ram@gmai.com

	
Why we want to do normalization:
 1) free database of modification anomalities
 2) minmize redesign when extending
 3) Avoid  bias towards any particular access pattern.
 
 We dont need to worry about the third one when we work on mongo schema design because we are designing around the application. So access pattern is coming from the application itself.
 
Sample blog post collection design 
==================================
	{
		"_id": ObjectId("asdasdasfsadasdsa"),
		"author": "erichson",
		"body" : "This is the test body",
		"comments": [
					{
						"body": "this is a comment",
						"email": "joe@test.com",
						"author": "John Doe"
					},
					{
						"body": "this is another comment",
						"email": "jane@test.com",
						"author": "Jane
					}
					]
		"date": ISODate("2013-xx-xx-xxxx"),
		"tags":		[
					"cycling",
					"mongodb",
					"swimming"
					],
		"title": "This is a test post"
	}
	
	- In this design, we are embedding comments inside the main doc. But we are still getting the benefits of normalization ( May be because, people who add comments are un registered users. So if same person add two comments, they both will show repeatedly.. is that not a problem ? )
	
	- We are designing around application. From this collection we have all the data needed for blog post except the details of the author 'ercickson' which is inside another collection called 'users'
	
Alternate way to design this schema ( like relational ) and why we should'nt do that
=================================================================================

Instead of one single collection with comments and tags embedded, if we seperate them into seperate collection, it will look as below


Posts
======
{ _id:1,
  title: _______,
  body:_______,
  author:_______,
  date:_______ 
}

Comments
========
{ _id:3,
  post_id:1,        ===> This will link a comment to a post
  author:_______,
  author_email:_______,
  order:_______         ===> we need an additional order here because we need to show in the order they were added to post. In other design, they were already 	
							 ordered because we were adding that to an array
}
Tags
====
{ _id:1,
  title: _______,
  tag:_______,
  post_id:1,
}

	*** This is the way we will design in a relational DB. But the problem here is that mongo do not allow joints.Each of these collections will be sitting in different parts disk. So if we need to show a blog post, all these has to be brought into program memory. But this is not an efficient way to do this.
	Always try to pre join the data by embedding it.
	This may not work in all cases to embed all data inside another doc because a collection cannot be greater than 16MB. 

There is no constaints in mongo - Livng without constraints
=============================================================

In the alternate schema design given above, in the relational model, post_id in comments table is a foriegn key constraint. This will ensure that there is a unique row in post table that corresponds to this forign key. 

In mongo, there is no such constaint. We need enforce it in the program. mongo will not ensure this for you like in relational.

****This is anothe reason why embedding helps.******

There is no transaction in mongo - Livng without transaction
=============================================================
	Relational database have transaction which ensure ACID ( Atomicity, consistancy, Isolation , Durability). For example, a transfer of funds from one bank account to another, even involving multiple changes such as debiting one account and crediting another, is a single transaction.
	
	There is no transaction in mongo.But it supports atomic operation.
	
	Atomic operation means, when a change made to a doc, another operation will not see a half changed doc. In relational, all data is spread in various tables and hense you need to have transaction to complete a logical operaton. In mongo, we follow a design that embed docs. So in that approach, atomicity can achieve the results of transactions becase all data is within the same doc.
	
	3 ways to work around no transaction in mongo
	---------------------------------------------
	1) Re structure: Design data as the first blog schema. So atomicity of doc will give the effect of transaction because all data is inside the same doc. We dont have a situation like relational where data is in three table and we need to open a transaction to complete updating three tables.
	
	2) Implement locks when changing the data. Do it via code.
	
	3) Tolerate little bit of inconsitancies. This is ok for a modern web application.Example a feed in social network. It is ok if one friend dont see all changes.
	
ONE TO ONE RELATIONSHIP
-----------------------
	Example of one to one relationship: Resume to Employee. We can model this by creating two tables. One for resume and one for employee and attach either emp id or resume id in one of the table to link each other. We can also model by embedding resume inside employee. Which option to pick depends on applicaton access pattern. Consider below items
		1. Frequency of access : Let us assume that our application mainly need the employee data and rarely need resumes of employee. In this case,we want to keep them as seperate collections so that we dont pull lot of stuff into memory.
		
		2.Size of items : If resume size + empolyee size ( size of one doc) is larger than 16mb, we cannot embed inside resume.
		
		3. Atomicity of Data: If we always want to update both employee and resume and never want to create any insistency, then we want to add both these items to the same collection.

ONE TO MANY RELATIONSHIP
-------------------------
	Example of one to many relationship is city and people. Take the example of NY and it has 8million people. One way to model this is to have a city as a collection and people as an array inside it. This will not work because we have 8 million records inside the array.
	Another way to do is to create a people collection and have an doc inside that for city which will have fields like area, name, etc. Problem here is that for several people who live NY, we are repeating this same information. So we are creating chances for in consistency.
	
	So best approach here would be to create two collections. One for city and one for people and link them in the many side. So people collection will have a field which will be city unique Id. So we need two collections for one to many relationship cases.
	
	ONE TO FEW: In case of one to few relationship, it is better to do embedding. For the blog and comments example in the blog post table, there are not many comments in one blog. So it is better to embed the doc inside blog rather than creating a seperate collection for comments. Also we dont have data inconsitency issues here. because same comment is not going to repeated across multiple posts. Or this is more like a weak relationship. Comments dont exists without blog.
	
	
	Q: When is it recommended to represent a one to many relationship in multiple collections?
	A: Whenever the many is large
	hmm. may be also when there is no data incosistency issue.
	

MANY TO MANY RELATIONSHIP
---------------------------
	Example would to book to author. Each book can have many authors and each author can write many books. Another example is students to teachers.
	In the case of book to authors, it is not really many to many rather few to few. So we can use the embedding of docs. So what we can do here is to create two collections. One for book and other one for author. Now create an array for author ids inside book.We can also do this vise versa by adding book id's inside authors. Picking an option mainly depends on the data access pattern of the application . If the app want to get to books and get the list of authors, then array of authors inside book is a better option.
	
	Instead of creating a book collection and embedding id's inside, we can also embed the whole book inside author. But this can create data in consistency. Same book sits under various authors. So this is not a recommended pattern.
	
	For students and teachers database also it works similar. We can have seperate collections for students and teachers and embed an array of students inside teachers and vice versa. Also with the risk of duplicating data, we can embed student data inside teachers. Doing vice versa may not be a good idea because in that can we need to have a student record available to create teachers data which may not be the case in most of the applications.

MULTIKEYS
---------
	for the student, teacher example above, let us assume that we have two tables. One for student and one for teachers and we put an array of teachers inside student collection. If we want to get the list of teachers for a student, it is straight forward. What if we want to get the list of students for a teacher. We can do array search as 
	
	@db.students.find({'teachers':{$all:[1,3]}}) == > List all docs that have a teachers value of 1 or 3. But here we have performance issue. We can over come that by creating an index on teachers. So mongo supports multi keys.
	
	@db.students.ensureIndex({'teachers':1})   ==> This way we create an index on teachers.
	
	Since mongo supports these multi keys, we can over come perfomant issues with cross linking and embedding. So we do kind of searches we do in relational and we do them fast.
	
BENEFITS OF EMBEDDING
--------------------
	Main benefits of embedding data are
		1. Improved read performance  ===> Getting data from disk is high letency. That means it is difficult to get to first byte and then it is much faster. So once we have things embedded, we have the reads faster.
		2.One round trip to DB. => We dont need to go across multiple collections. We get all on first operation.
		
TREES:
--------
	There is an easy way to represnt tree data in Mongo. For example the ecommerce application have categories associated to a product like Home - Outdoords - Winter - Snow. The way we can represent this in Mongo is to put an 'ancestors' attribute and represnt all ansistors of a particular doc. 
	
	category collection
	
			{
		  _id: 34,
		  name : "Snorkeling",
		  parent_id: 12,
		  ancestors: [12, 35, 90]
		}
	
	So this tells that immediate parent of Snorkeliing is category with Id 12. Now if we look at the category 12, we can see parent of that category. But the data in ancestors field wil help us to identify the tree. Also data is given in the order of tree.	
	
	Q: Which query will find all descendants of the snorkeling category? ?
	A: db.categories.find({ancestors:34})    ==> Polymorphism will it happen. This query will look for '34' as a array element in ancestors field.
	
WHEN TO DENORMALIZE DATA?
--------------------------
	If we look into what we did so far, we are doing de normalization of data. reason for normalization relational database is to avoid data duplication and inconsitency. 
	
	1. One to One ==> Ok to embed the data because we dont have data incosistency issues or data duplication issues
	2. One to many ==>  If we go from one to many ( city to people ), we dont have data inconsitency issue. So it is ok to do denormalization( as long as many is not so huge.). If we go from many to one ( people to city), we can embed by linking which avoids data inconsitency issue. 
	3. Many to Many ==> We can avoid issues from denormalization by linking using arrays ( like student to teacher linking).
	
	
	
	
	
	
	
	
	
	
	
	



		
	
	
	
	
	
	
	
	
	
	
	
	
	





	
	
	






 
 
